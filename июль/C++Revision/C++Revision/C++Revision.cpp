// C++Revision.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>

using namespace std;

// структура, класс - разница +
// модификаторы доступа и основы ООП +
// Конструктор - метод, который вызывается при создании объекта класса. Он инициализирует объект. Конструктор должен
// носить такое же название как и класс. Конструктор не должен ничего возвращать. Конструкторов может быть несколько.
// Не может быть несколько конструкторов с одинаковой сигнатурой. +
// Перегрузка функций, методов. +

// Константность. Есть методы, которые меняют состояние объекта (значения полей) (например, setter'ы).
// А есть методы, которые этого делать не должны. Например, метод, который возвращает значение суммы координат вектора.
// Помечаются специальным ключевым словом const, которое должно идти после названия метода.

// параметры по умолчанию

// Все поля и методы публичные по умолчания (видны извне, то есть вне структуры) (поля имеют модификатор доступа public)
struct MyPoint1
{
	// поля
	int x;
	int y;

	// методы
	int sum() const
	{
		return x + y;
	}

private:
	// А здесь поля и методы private.
};

// Если бы мы создали структуру "квадрат" (задается 4 точками), то пользователь извне смог бы нарушить инвариант 
// (то, что задается является квадратом)

// Поддержание инвариантов. Проблема в том, что методы могут опираться на то, что объект является квадратом, а пользователь
// мог это испортить. Например, теперь выводим некорректную площадь и прочее

// ООП:
// Чтобы пользователь не мог нарушить инварианты класса, поля теперь всегда будут имет модификатор доступа private.
// Для каждого поля создаются специальные методы getter и setter. Иногда нужен только getter или setter.


// поля и методы по умолчанию доступны только внутри класса (поля имеют модификатор доступа private)
class PointWithNotNegCoordinates // хотим сохранять этот инвариант
{
	// поля
	int x = 0;
	int y = 0;

public:
	// методы

	int getX() const
	{
		return x;
	}

	int getY() const
	{
		return y;
	}

	void setX(int value)
	{
		if (value < 0)
		{
			cout << "X can't be negative!" << endl;
			return;
		}

		x = value;
	}

	void setY(int value)
	{
		if (value < 0)
		{
			cout << "Y can't be negative!" << endl;
			return;
		}

		y = value;
	}

	int sum() const
	{
		return x + y;
	}
};

// Делаем публичнымми только те методы, которые нужны пользователю.

class Vector
{
	int x = 0;
	int y = 0;

public:
	// У конструктора (метода Vector) две перегрузки.
	Vector(int x, int y)
	{
		this->x = x;
		this->y = y;
	}

	Vector(int xBegin, int yBegin, int xEnd, int yEnd)
	{
		this->x = xEnd - xBegin;
		this->y = yEnd - yBegin;
	}

	void setX(int x)
	{
		this->x = x;
	}

	void setY(int y)
	{
		this->y = y;
	}

	int getX() const
	{
		return x;
	}

	int getY() const
	{
		return y;
	}

};

int main()
{
	MyPoint1 p1;
	p1.x = 5;
	p1.y = 6;
	cout << p1.sum() << endl;

	PointWithNotNegCoordinates p2;
	p2.setX(-5);
	cout << p2.getX() << endl;
	p2.setX(7);
	cout << p2.getX() << endl;

	Vector v1(7, 2);
	cout << v1.getX() << endl;
	cout << v1.getY() << endl;

	Vector v2(1, 2, 1, 7);
	cout << v2.getX() << endl;
	cout << v2.getY() << endl;

	return 0;
}